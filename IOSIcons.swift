//
//  IOSIcons.swift
//  ProjectName
//
//  Created by Gabriel Kroll on 17/03/15.
//  Copyright (c) 2015 Freakotivity. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class IOSIcons : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfAddInCircle: UIImage?
        static var addInCircleTargets: [AnyObject]?
        static var imageOfAdd: UIImage?
        static var addTargets: [AnyObject]?
        static var imageOfAlbum: UIImage?
        static var albumTargets: [AnyObject]?
        static var imageOfClock: UIImage?
        static var clockTargets: [AnyObject]?
        static var imageOfDownloadICloud: UIImage?
        static var downloadICloudTargets: [AnyObject]?
        static var imageOfInfo: UIImage?
        static var infoTargets: [AnyObject]?
        static var imageOfMore: UIImage?
        static var moreTargets: [AnyObject]?
        static var imageOfPhotos: UIImage?
        static var photosTargets: [AnyObject]?
        static var imageOfRemove: UIImage?
        static var removeTargets: [AnyObject]?
        static var imageOfSent: UIImage?
        static var sentTargets: [AnyObject]?
        static var imageOfShare: UIImage?
        static var shareTargets: [AnyObject]?
        static var imageOfSoundOff: UIImage?
        static var soundOffTargets: [AnyObject]?
        static var imageOfSoundOn: UIImage?
        static var soundOnTargets: [AnyObject]?
        static var imageOfSound: UIImage?
        static var soundTargets: [AnyObject]?
        static var imageOfUpload: UIImage?
        static var uploadTargets: [AnyObject]?
        static var imageOfFolder: UIImage?
        static var folderTargets: [AnyObject]?
        static var imageOfFolderAdd: UIImage?
        static var folderAddTargets: [AnyObject]?
        static var imageOfFolderRemove: UIImage?
        static var folderRemoveTargets: [AnyObject]?
        static var imageOfRow: UIImage?
        static var rowTargets: [AnyObject]?
        static var imageOfCheck: UIImage?
        static var checkTargets: [AnyObject]?
        static var imageOfTabs: UIImage?
        static var tabsTargets: [AnyObject]?
        static var imageOfWrite: UIImage?
        static var writeTargets: [AnyObject]?
        static var imageOfCamera: UIImage?
        static var cameraTargets: [AnyObject]?
        static var imageOfThreeSegmentedCircle2px: UIImage?
        static var threeSegmentedCircle2pxTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawAddInCircle() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Add-2
        //// Oval-7 Drawing
        var oval7Path = UIBezierPath(ovalInRect: CGRectMake(2, 2, 53, 53))
        color0.setStroke()
        oval7Path.lineWidth = 2
        oval7Path.stroke()


        //// Path-37 Drawing
        var path37Path = UIBezierPath()
        path37Path.moveToPoint(CGPointMake(28.49, 12.75))
        path37Path.addLineToPoint(CGPointMake(28.49, 44.25))
        path37Path.miterLimit = 4;

        path37Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path37Path.lineWidth = 3
        path37Path.stroke()


        //// Path-38 Drawing
        var path38Path = UIBezierPath()
        path38Path.moveToPoint(CGPointMake(13.04, 28.95))
        path38Path.addLineToPoint(CGPointMake(43.96, 28.95))
        path38Path.miterLimit = 4;

        path38Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path38Path.lineWidth = 3
        path38Path.stroke()
    }

    public class func drawAdd() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Path-37 Drawing
        var path37Path = UIBezierPath()
        path37Path.moveToPoint(CGPointMake(16.5, 0.3))
        path37Path.addLineToPoint(CGPointMake(16.5, 31.8))
        path37Path.miterLimit = 4;

        path37Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path37Path.lineWidth = 3
        path37Path.stroke()


        //// Path-38 Drawing
        var path38Path = UIBezierPath()
        path38Path.moveToPoint(CGPointMake(1.04, 16.05))
        path38Path.addLineToPoint(CGPointMake(31.96, 16.05))
        path38Path.miterLimit = 4;

        path38Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path38Path.lineWidth = 3
        path38Path.stroke()
    }

    public class func drawAlbum() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-32 Drawing
        let rectangle32Path = UIBezierPath(rect: CGRectMake(2, 10.8, 56, 41))
        color0.setStroke()
        rectangle32Path.lineWidth = 2
        rectangle32Path.stroke()


        //// Path-33 Drawing
        var path33Path = UIBezierPath()
        path33Path.moveToPoint(CGPointMake(6, 6.8))
        path33Path.addLineToPoint(CGPointMake(52.95, 6.8))
        path33Path.miterLimit = 4;

        path33Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path33Path.lineWidth = 2
        path33Path.stroke()


        //// Path-34 Drawing
        var path34Path = UIBezierPath()
        path34Path.moveToPoint(CGPointMake(11, 1.8))
        path34Path.addLineToPoint(CGPointMake(49, 1.8))
        path34Path.miterLimit = 4;

        path34Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path34Path.lineWidth = 2
        path34Path.stroke()
    }

    public class func drawClock() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Clock
        //// Oval-2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(2, 2.29, 53, 53))
        color0.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Rectangle-95 Drawing
        var rectangle95Path = UIBezierPath()
        rectangle95Path.moveToPoint(CGPointMake(28, 7))
        rectangle95Path.addLineToPoint(CGPointMake(28, 30))
        rectangle95Path.addLineToPoint(CGPointMake(44, 30))
        rectangle95Path.miterLimit = 4;

        rectangle95Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle95Path.lineWidth = 2
        rectangle95Path.stroke()
    }

    public class func drawDownloadICloud() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Download-iCloud
        //// Path-40 Drawing
        var path40Path = UIBezierPath()
        path40Path.moveToPoint(CGPointMake(29, 16.8))
        path40Path.addLineToPoint(CGPointMake(29, 48.8))
        path40Path.miterLimit = 4;

        path40Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path40Path.lineWidth = 2
        path40Path.stroke()


        //// Path-41 Drawing
        var path41Path = UIBezierPath()
        path41Path.moveToPoint(CGPointMake(20, 41.33))
        path41Path.addLineToPoint(CGPointMake(29.21, 49.8))
        path41Path.addLineToPoint(CGPointMake(39, 40.8))
        path41Path.miterLimit = 4;

        path41Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path41Path.lineWidth = 2
        path41Path.stroke()


        //// Download
        //// Cloud 2 Drawing
        var cloud2Path = UIBezierPath()
        cloud2Path.moveToPoint(CGPointMake(23.52, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(12.41, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(12.03, 35.8))
        cloud2Path.addCurveToPoint(CGPointMake(2, 25.37), controlPoint1: CGPointMake(6.46, 35.59), controlPoint2: CGPointMake(2, 31))
        cloud2Path.addCurveToPoint(CGPointMake(8.37, 15.75), controlPoint1: CGPointMake(2, 21.04), controlPoint2: CGPointMake(4.63, 17.33))
        cloud2Path.addCurveToPoint(CGPointMake(17.04, 8.76), controlPoint1: CGPointMake(9.24, 11.75), controlPoint2: CGPointMake(12.79, 8.76))
        cloud2Path.addCurveToPoint(CGPointMake(20.58, 9.49), controlPoint1: CGPointMake(18.3, 8.76), controlPoint2: CGPointMake(19.5, 9.02))
        cloud2Path.addCurveToPoint(CGPointMake(33.24, 1.8), controlPoint1: CGPointMake(22.96, 4.92), controlPoint2: CGPointMake(27.74, 1.8))
        cloud2Path.addCurveToPoint(CGPointMake(47.51, 16.1), controlPoint1: CGPointMake(41.12, 1.8), controlPoint2: CGPointMake(47.51, 8.2))
        cloud2Path.addCurveToPoint(CGPointMake(47.51, 16.55), controlPoint1: CGPointMake(47.51, 16.25), controlPoint2: CGPointMake(47.51, 16.4))
        cloud2Path.addCurveToPoint(CGPointMake(56, 26.14), controlPoint1: CGPointMake(52.29, 17.12), controlPoint2: CGPointMake(56, 21.2))
        cloud2Path.addCurveToPoint(CGPointMake(46.36, 35.8), controlPoint1: CGPointMake(56, 31.48), controlPoint2: CGPointMake(51.68, 35.8))
        cloud2Path.addCurveToPoint(CGPointMake(45.97, 35.79), controlPoint1: CGPointMake(46.23, 35.8), controlPoint2: CGPointMake(46.1, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(33.82, 35.8))
        cloud2Path.miterLimit = 4;

        cloud2Path.usesEvenOddFillRule = true;

        color0.setStroke()
        cloud2Path.lineWidth = 2
        cloud2Path.stroke()
    }

    public class func drawInfo() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-12 Drawing
        var rectangle12Path = UIBezierPath()
        rectangle12Path.moveToPoint(CGPointMake(32, 22))
        rectangle12Path.addLineToPoint(CGPointMake(32, 41))
        rectangle12Path.addLineToPoint(CGPointMake(34, 41))
        rectangle12Path.addLineToPoint(CGPointMake(34, 42))
        rectangle12Path.addLineToPoint(CGPointMake(24, 42))
        rectangle12Path.addLineToPoint(CGPointMake(24, 41))
        rectangle12Path.addLineToPoint(CGPointMake(27, 41))
        rectangle12Path.addLineToPoint(CGPointMake(27, 24))
        rectangle12Path.addLineToPoint(CGPointMake(24, 24))
        rectangle12Path.addLineToPoint(CGPointMake(24, 22))
        rectangle12Path.addLineToPoint(CGPointMake(32, 22))
        rectangle12Path.closePath()
        rectangle12Path.miterLimit = 4;

        rectangle12Path.usesEvenOddFillRule = true;

        color0.setFill()
        rectangle12Path.fill()


        //// Oval-3 Drawing
        var oval3Path = UIBezierPath(ovalInRect: CGRectMake(25, 12, 7, 7))
        color0.setFill()
        oval3Path.fill()


        //// Oval- 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(2, 2, 53, 53))
        color0.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()
    }

    public class func drawMore() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Oval-10 Drawing
        var oval10Path = UIBezierPath(ovalInRect: CGRectMake(2, 1.8, 9, 9))
        color0.setStroke()
        oval10Path.lineWidth = 2
        oval10Path.stroke()


        //// Oval-10-copy Drawing
        var oval10copyPath = UIBezierPath(ovalInRect: CGRectMake(21, 1.8, 9, 9))
        color0.setStroke()
        oval10copyPath.lineWidth = 2
        oval10copyPath.stroke()


        //// Oval-10-copy-2 Drawing
        var oval10copy2Path = UIBezierPath(ovalInRect: CGRectMake(40, 1.8, 9, 9))
        color0.setStroke()
        oval10copy2Path.lineWidth = 2
        oval10copy2Path.stroke()
    }

    public class func drawPhotos() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-33 Drawing
        let rectangle33Path = UIBezierPath(rect: CGRectMake(8, 9.8, 50, 38))
        color0.setStroke()
        rectangle33Path.lineWidth = 2
        rectangle33Path.stroke()


        //// Rectangle-34 Drawing
        var rectangle34Path = UIBezierPath()
        rectangle34Path.moveToPoint(CGPointMake(52, 7.8))
        rectangle34Path.addLineToPoint(CGPointMake(52, 1.8))
        rectangle34Path.addLineToPoint(CGPointMake(2, 1.8))
        rectangle34Path.addLineToPoint(CGPointMake(2, 39.8))
        rectangle34Path.addLineToPoint(CGPointMake(7, 39.8))
        rectangle34Path.miterLimit = 4;

        rectangle34Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle34Path.lineWidth = 2
        rectangle34Path.stroke()
    }

    public class func drawRemove() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Remove
        //// Oval-7 Drawing
        var oval7Path = UIBezierPath(ovalInRect: CGRectMake(2, 2, 53, 53))
        color0.setStroke()
        oval7Path.lineWidth = 2
        oval7Path.stroke()


        //// Path-38 Drawing
        var path38Path = UIBezierPath()
        path38Path.moveToPoint(CGPointMake(13.04, 29.5))
        path38Path.addLineToPoint(CGPointMake(43.97, 29.5))
        path38Path.miterLimit = 4;

        path38Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path38Path.lineWidth = 3
        path38Path.stroke()
    }

    public class func drawSent() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Path-3 Drawing
        var path3Path = UIBezierPath()
        path3Path.moveToPoint(CGPointMake(3, 26.62))
        path3Path.addLineToPoint(CGPointMake(20.08, 35.11))
        path3Path.addLineToPoint(CGPointMake(28.29, 53))
        path3Path.addLineToPoint(CGPointMake(52, 3))
        path3Path.addLineToPoint(CGPointMake(3, 26.62))
        path3Path.closePath()
        path3Path.miterLimit = 4;

        path3Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path3Path.lineWidth = 2
        path3Path.stroke()


        //// Path-4 Drawing
        var path4Path = UIBezierPath()
        path4Path.moveToPoint(CGPointMake(19, 35))
        path4Path.addLineToPoint(CGPointMake(52, 3))
        path4Path.miterLimit = 4;

        path4Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path4Path.lineWidth = 2
        path4Path.stroke()
    }

    public class func drawShare() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-32 Drawing
        var rectangle32Path = UIBezierPath()
        rectangle32Path.moveToPoint(CGPointMake(16.97, 15.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 15.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 56.8))
        rectangle32Path.addLineToPoint(CGPointMake(43, 56.8))
        rectangle32Path.addLineToPoint(CGPointMake(43, 15.8))
        rectangle32Path.addLineToPoint(CGPointMake(27.71, 15.8))
        rectangle32Path.miterLimit = 4;

        rectangle32Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle32Path.lineWidth = 2
        rectangle32Path.stroke()


        //// Path-30 Drawing
        var path30Path = UIBezierPath()
        path30Path.moveToPoint(CGPointMake(23, 36.8))
        path30Path.addLineToPoint(CGPointMake(23, 1.8))
        path30Path.miterLimit = 4;

        path30Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path30Path.lineWidth = 2
        path30Path.stroke()


        //// Path-31 Drawing
        var path31Path = UIBezierPath()
        path31Path.moveToPoint(CGPointMake(14, 10.8))
        path31Path.addLineToPoint(CGPointMake(23.04, 1.8))
        path31Path.addLineToPoint(CGPointMake(32, 10.72))
        path31Path.miterLimit = 4;

        path31Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path31Path.lineWidth = 2
        path31Path.stroke()
    }

    public class func drawSoundOff() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-32 Drawing
        var rectangle32Path = UIBezierPath()
        rectangle32Path.moveToPoint(CGPointMake(12, 11.8))
        rectangle32Path.addLineToPoint(CGPointMake(23, 2.79))
        rectangle32Path.addLineToPoint(CGPointMake(23, 33.81))
        rectangle32Path.addLineToPoint(CGPointMake(12, 24.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 24.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 11.8))
        rectangle32Path.addLineToPoint(CGPointMake(12, 11.8))
        rectangle32Path.closePath()
        rectangle32Path.miterLimit = 4;

        rectangle32Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle32Path.lineWidth = 2
        rectangle32Path.stroke()


        //// Path-74 Drawing
        var path74Path = UIBezierPath()
        path74Path.moveToPoint(CGPointMake(32.71, 9.67))
        path74Path.addLineToPoint(CGPointMake(49.28, 26.24))
        path74Path.miterLimit = 4;

        path74Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path74Path.lineWidth = 2
        path74Path.stroke()


        //// Path-75 Drawing
        var path75Path = UIBezierPath()
        path75Path.moveToPoint(CGPointMake(49.94, 9.76))
        path75Path.addLineToPoint(CGPointMake(32.12, 25.8))
        path75Path.miterLimit = 4;

        path75Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path75Path.lineWidth = 2
        path75Path.stroke()
    }

    public class func drawSoundOn() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-32 Drawing
        var rectangle32Path = UIBezierPath()
        rectangle32Path.moveToPoint(CGPointMake(12, 16.8))
        rectangle32Path.addLineToPoint(CGPointMake(23, 7.79))
        rectangle32Path.addLineToPoint(CGPointMake(23, 38.81))
        rectangle32Path.addLineToPoint(CGPointMake(12, 29.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 29.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 16.8))
        rectangle32Path.addLineToPoint(CGPointMake(12, 16.8))
        rectangle32Path.closePath()
        rectangle32Path.miterLimit = 4;

        rectangle32Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle32Path.lineWidth = 2
        rectangle32Path.stroke()


        //// Oval-5 Drawing
        var oval5Path = UIBezierPath()
        oval5Path.moveToPoint(CGPointMake(29.41, 15.03))
        oval5Path.addCurveToPoint(CGPointMake(28.82, 14.24), controlPoint1: CGPointMake(29.22, 14.76), controlPoint2: CGPointMake(29.02, 14.49))
        oval5Path.addLineToPoint(CGPointMake(31.09, 12.28))
        oval5Path.addCurveToPoint(CGPointMake(31.87, 13.32), controlPoint1: CGPointMake(31.37, 12.62), controlPoint2: CGPointMake(31.63, 12.96))
        oval5Path.addCurveToPoint(CGPointMake(35, 23.3), controlPoint1: CGPointMake(33.84, 16.15), controlPoint2: CGPointMake(35, 19.59))
        oval5Path.addCurveToPoint(CGPointMake(31.63, 33.62), controlPoint1: CGPointMake(35, 27.16), controlPoint2: CGPointMake(33.75, 30.73))
        oval5Path.addLineToPoint(CGPointMake(29.34, 31.67))
        oval5Path.addCurveToPoint(CGPointMake(32, 23.3), controlPoint1: CGPointMake(31.02, 29.31), controlPoint2: CGPointMake(32, 26.42))
        oval5Path.addCurveToPoint(CGPointMake(29.41, 15.03), controlPoint1: CGPointMake(32, 20.3), controlPoint2: CGPointMake(31.09, 17.44))
        oval5Path.closePath()
        oval5Path.miterLimit = 4;

        oval5Path.usesEvenOddFillRule = true;

        color0.setFill()
        oval5Path.fill()


        //// Oval- Drawing
        var ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPointMake(41, 23.8))
        ovalPath.addCurveToPoint(CGPointMake(36.05, 9.54), controlPoint1: CGPointMake(41, 18.55), controlPoint2: CGPointMake(39.24, 13.57))
        ovalPath.addCurveToPoint(CGPointMake(35.31, 8.66), controlPoint1: CGPointMake(35.81, 9.24), controlPoint2: CGPointMake(35.56, 8.94))
        ovalPath.addLineToPoint(CGPointMake(37.59, 6.7))
        ovalPath.addCurveToPoint(CGPointMake(38.4, 7.68), controlPoint1: CGPointMake(37.86, 7.02), controlPoint2: CGPointMake(38.14, 7.35))
        ovalPath.addCurveToPoint(CGPointMake(44, 23.8), controlPoint1: CGPointMake(41.91, 12.11), controlPoint2: CGPointMake(44, 17.71))
        ovalPath.addCurveToPoint(CGPointMake(38.92, 39.25), controlPoint1: CGPointMake(44, 29.59), controlPoint2: CGPointMake(42.11, 34.93))
        ovalPath.addCurveToPoint(CGPointMake(38.65, 39.6), controlPoint1: CGPointMake(38.83, 39.36), controlPoint2: CGPointMake(38.74, 39.48))
        ovalPath.addLineToPoint(CGPointMake(36.37, 37.65))
        ovalPath.addCurveToPoint(CGPointMake(36.51, 37.46), controlPoint1: CGPointMake(36.41, 37.59), controlPoint2: CGPointMake(36.46, 37.52))
        ovalPath.addCurveToPoint(CGPointMake(41, 23.8), controlPoint1: CGPointMake(39.41, 33.54), controlPoint2: CGPointMake(41, 28.79))
        ovalPath.closePath()
        ovalPath.miterLimit = 4;

        ovalPath.usesEvenOddFillRule = true;

        color0.setFill()
        ovalPath.fill()


        //// Oval- 2 Drawing
        var oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(50, 23.8))
        oval2Path.addCurveToPoint(CGPointMake(42.84, 3.63), controlPoint1: CGPointMake(50, 16.35), controlPoint2: CGPointMake(47.45, 9.29))
        oval2Path.addCurveToPoint(CGPointMake(42.14, 2.79), controlPoint1: CGPointMake(42.61, 3.34), controlPoint2: CGPointMake(42.37, 3.06))
        oval2Path.addLineToPoint(CGPointMake(44.41, 0.83))
        oval2Path.addCurveToPoint(CGPointMake(45.17, 1.73), controlPoint1: CGPointMake(44.67, 1.13), controlPoint2: CGPointMake(44.92, 1.43))
        oval2Path.addCurveToPoint(CGPointMake(53, 23.8), controlPoint1: CGPointMake(50.06, 7.75), controlPoint2: CGPointMake(53, 15.44))
        oval2Path.addCurveToPoint(CGPointMake(45.71, 45.19), controlPoint1: CGPointMake(53, 31.85), controlPoint2: CGPointMake(50.28, 39.27))
        oval2Path.addLineToPoint(CGPointMake(44.65, 44.7))
        oval2Path.addLineToPoint(CGPointMake(43.23, 43.49))
        oval2Path.addCurveToPoint(CGPointMake(50, 23.8), controlPoint1: CGPointMake(47.59, 37.92), controlPoint2: CGPointMake(50, 31.05))
        oval2Path.closePath()
        oval2Path.miterLimit = 4;

        oval2Path.usesEvenOddFillRule = true;

        color0.setFill()
        oval2Path.fill()
    }

    public class func drawSound() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-32 Drawing
        var rectangle32Path = UIBezierPath()
        rectangle32Path.moveToPoint(CGPointMake(12, 11.8))
        rectangle32Path.addLineToPoint(CGPointMake(23, 2.79))
        rectangle32Path.addLineToPoint(CGPointMake(23, 33.81))
        rectangle32Path.addLineToPoint(CGPointMake(12, 24.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 24.8))
        rectangle32Path.addLineToPoint(CGPointMake(2, 11.8))
        rectangle32Path.addLineToPoint(CGPointMake(12, 11.8))
        rectangle32Path.closePath()
        rectangle32Path.miterLimit = 4;

        rectangle32Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle32Path.lineWidth = 2
        rectangle32Path.stroke()
    }

    public class func drawUpload() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Upload
        //// Path-40 Drawing
        var path40Path = UIBezierPath()
        path40Path.moveToPoint(CGPointMake(29, 19.8))
        path40Path.addLineToPoint(CGPointMake(29, 51.8))
        path40Path.miterLimit = 4;

        path40Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path40Path.lineWidth = 2
        path40Path.stroke()


        //// Download
        //// Cloud 2 Drawing
        var cloud2Path = UIBezierPath()
        cloud2Path.moveToPoint(CGPointMake(23.52, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(12.41, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(12.03, 35.8))
        cloud2Path.addCurveToPoint(CGPointMake(2, 25.37), controlPoint1: CGPointMake(6.46, 35.59), controlPoint2: CGPointMake(2, 31))
        cloud2Path.addCurveToPoint(CGPointMake(8.37, 15.75), controlPoint1: CGPointMake(2, 21.04), controlPoint2: CGPointMake(4.63, 17.33))
        cloud2Path.addCurveToPoint(CGPointMake(17.04, 8.76), controlPoint1: CGPointMake(9.24, 11.75), controlPoint2: CGPointMake(12.79, 8.76))
        cloud2Path.addCurveToPoint(CGPointMake(20.58, 9.49), controlPoint1: CGPointMake(18.3, 8.76), controlPoint2: CGPointMake(19.5, 9.02))
        cloud2Path.addCurveToPoint(CGPointMake(33.24, 1.8), controlPoint1: CGPointMake(22.96, 4.92), controlPoint2: CGPointMake(27.74, 1.8))
        cloud2Path.addCurveToPoint(CGPointMake(47.51, 16.1), controlPoint1: CGPointMake(41.12, 1.8), controlPoint2: CGPointMake(47.51, 8.2))
        cloud2Path.addCurveToPoint(CGPointMake(47.51, 16.55), controlPoint1: CGPointMake(47.51, 16.25), controlPoint2: CGPointMake(47.51, 16.4))
        cloud2Path.addCurveToPoint(CGPointMake(56, 26.14), controlPoint1: CGPointMake(52.29, 17.12), controlPoint2: CGPointMake(56, 21.2))
        cloud2Path.addCurveToPoint(CGPointMake(46.36, 35.8), controlPoint1: CGPointMake(56, 31.48), controlPoint2: CGPointMake(51.68, 35.8))
        cloud2Path.addCurveToPoint(CGPointMake(45.97, 35.79), controlPoint1: CGPointMake(46.23, 35.8), controlPoint2: CGPointMake(46.1, 35.8))
        cloud2Path.addLineToPoint(CGPointMake(33.82, 35.8))
        cloud2Path.miterLimit = 4;

        cloud2Path.usesEvenOddFillRule = true;

        color0.setStroke()
        cloud2Path.lineWidth = 2
        cloud2Path.stroke()


        //// Path-41 Drawing
        var path41Path = UIBezierPath()
        path41Path.moveToPoint(CGPointMake(21, 26.33))
        path41Path.addLineToPoint(CGPointMake(28.76, 18.8))
        path41Path.addLineToPoint(CGPointMake(37, 26.8))
        path41Path.miterLimit = 4;

        path41Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path41Path.lineWidth = 2
        path41Path.stroke()
    }

    public class func drawFolder() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-9 Drawing
        var rectangle9Path = UIBezierPath()
        rectangle9Path.moveToPoint(CGPointMake(2, 14))
        rectangle9Path.addLineToPoint(CGPointMake(2, 44))
        rectangle9Path.addCurveToPoint(CGPointMake(5.99, 48), controlPoint1: CGPointMake(2, 46.21), controlPoint2: CGPointMake(3.8, 48))
        rectangle9Path.addLineToPoint(CGPointMake(52.01, 48))
        rectangle9Path.addCurveToPoint(CGPointMake(56, 44), controlPoint1: CGPointMake(54.21, 48), controlPoint2: CGPointMake(56, 46.21))
        rectangle9Path.addLineToPoint(CGPointMake(56, 14))
        rectangle9Path.miterLimit = 4;

        rectangle9Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle9Path.lineWidth = 2
        rectangle9Path.stroke()


        //// Rectangle-10 Drawing
        var rectangle10Path = UIBezierPath()
        rectangle10Path.moveToPoint(CGPointMake(23, 6))
        rectangle10Path.addLineToPoint(CGPointMake(18.21, 2))
        rectangle10Path.addLineToPoint(CGPointMake(5.5, 2))
        rectangle10Path.addCurveToPoint(CGPointMake(2, 5.5), controlPoint1: CGPointMake(3.57, 2), controlPoint2: CGPointMake(2, 3.57))
        rectangle10Path.addLineToPoint(CGPointMake(2, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 9.51))
        rectangle10Path.addCurveToPoint(CGPointMake(52.5, 6), controlPoint1: CGPointMake(56, 7.57), controlPoint2: CGPointMake(54.43, 6))
        rectangle10Path.addLineToPoint(CGPointMake(23, 6))
        rectangle10Path.closePath()
        rectangle10Path.miterLimit = 4;

        rectangle10Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle10Path.lineWidth = 2
        rectangle10Path.stroke()
    }

    public class func drawFolderAdd() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-13 Drawing
        var rectangle13Path = UIBezierPath()
        rectangle13Path.moveToPoint(CGPointMake(2, 14))
        rectangle13Path.addLineToPoint(CGPointMake(2, 44))
        rectangle13Path.addCurveToPoint(CGPointMake(5.99, 48), controlPoint1: CGPointMake(2, 46.21), controlPoint2: CGPointMake(3.8, 48))
        rectangle13Path.addLineToPoint(CGPointMake(52.01, 48))
        rectangle13Path.addCurveToPoint(CGPointMake(56, 44), controlPoint1: CGPointMake(54.21, 48), controlPoint2: CGPointMake(56, 46.21))
        rectangle13Path.addLineToPoint(CGPointMake(56, 14))
        rectangle13Path.miterLimit = 4;

        rectangle13Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle13Path.lineWidth = 2
        rectangle13Path.stroke()


        //// Rectangle-10 Drawing
        var rectangle10Path = UIBezierPath()
        rectangle10Path.moveToPoint(CGPointMake(23, 6))
        rectangle10Path.addLineToPoint(CGPointMake(18.21, 2))
        rectangle10Path.addLineToPoint(CGPointMake(5.5, 2))
        rectangle10Path.addCurveToPoint(CGPointMake(2, 5.5), controlPoint1: CGPointMake(3.57, 2), controlPoint2: CGPointMake(2, 3.57))
        rectangle10Path.addLineToPoint(CGPointMake(2, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 9.51))
        rectangle10Path.addCurveToPoint(CGPointMake(52.5, 6), controlPoint1: CGPointMake(56, 7.57), controlPoint2: CGPointMake(54.43, 6))
        rectangle10Path.addLineToPoint(CGPointMake(23, 6))
        rectangle10Path.closePath()
        rectangle10Path.miterLimit = 4;

        rectangle10Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle10Path.lineWidth = 2
        rectangle10Path.stroke()


        //// Path-78 Drawing
        var path78Path = UIBezierPath()
        path78Path.moveToPoint(CGPointMake(28.99, 24))
        path78Path.addLineToPoint(CGPointMake(28.99, 38))
        path78Path.miterLimit = 4;

        path78Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path78Path.lineWidth = 2
        path78Path.stroke()


        //// Path-79 Drawing
        var path79Path = UIBezierPath()
        path79Path.moveToPoint(CGPointMake(22, 31))
        path79Path.addLineToPoint(CGPointMake(36, 31))
        path79Path.miterLimit = 4;

        path79Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path79Path.lineWidth = 2
        path79Path.stroke()


        //// Oval-17 Drawing
        var oval17Path = UIBezierPath(ovalInRect: CGRectMake(16, 18, 26, 26))
        color0.setStroke()
        oval17Path.lineWidth = 2
        oval17Path.stroke()
    }

    public class func drawFolderRemove() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Rectangle-14 Drawing
        var rectangle14Path = UIBezierPath()
        rectangle14Path.moveToPoint(CGPointMake(2, 14))
        rectangle14Path.addLineToPoint(CGPointMake(2, 44))
        rectangle14Path.addCurveToPoint(CGPointMake(5.99, 48), controlPoint1: CGPointMake(2, 46.21), controlPoint2: CGPointMake(3.8, 48))
        rectangle14Path.addLineToPoint(CGPointMake(52.01, 48))
        rectangle14Path.addCurveToPoint(CGPointMake(56, 44), controlPoint1: CGPointMake(54.21, 48), controlPoint2: CGPointMake(56, 46.21))
        rectangle14Path.addLineToPoint(CGPointMake(56, 14))
        rectangle14Path.miterLimit = 4;

        rectangle14Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle14Path.lineWidth = 2
        rectangle14Path.stroke()


        //// Rectangle-10 Drawing
        var rectangle10Path = UIBezierPath()
        rectangle10Path.moveToPoint(CGPointMake(23, 6))
        rectangle10Path.addLineToPoint(CGPointMake(18.21, 2))
        rectangle10Path.addLineToPoint(CGPointMake(5.5, 2))
        rectangle10Path.addCurveToPoint(CGPointMake(2, 5.5), controlPoint1: CGPointMake(3.57, 2), controlPoint2: CGPointMake(2, 3.57))
        rectangle10Path.addLineToPoint(CGPointMake(2, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 15))
        rectangle10Path.addLineToPoint(CGPointMake(56, 9.51))
        rectangle10Path.addCurveToPoint(CGPointMake(52.5, 6), controlPoint1: CGPointMake(56, 7.57), controlPoint2: CGPointMake(54.43, 6))
        rectangle10Path.addLineToPoint(CGPointMake(23, 6))
        rectangle10Path.closePath()
        rectangle10Path.miterLimit = 4;

        rectangle10Path.usesEvenOddFillRule = true;

        color0.setStroke()
        rectangle10Path.lineWidth = 2
        rectangle10Path.stroke()


        //// Path-79 Drawing
        var path79Path = UIBezierPath()
        path79Path.moveToPoint(CGPointMake(22, 31))
        path79Path.addLineToPoint(CGPointMake(36, 31))
        path79Path.miterLimit = 4;

        path79Path.usesEvenOddFillRule = true;

        color0.setStroke()
        path79Path.lineWidth = 2
        path79Path.stroke()


        //// Oval-17-copy Drawing
        var oval17copyPath = UIBezierPath(ovalInRect: CGRectMake(16, 18, 26, 26))
        color0.setStroke()
        oval17copyPath.lineWidth = 2
        oval17copyPath.stroke()
    }

    public class func drawRow() {
        //// Color Declarations
        let color2 = UIColor(red: 0.719, green: 0.719, blue: 0.719, alpha: 1.000)

        //// row Drawing
        var rowPath = UIBezierPath()
        rowPath.moveToPoint(CGPointMake(0.36, 18.44))
        rowPath.addLineToPoint(CGPointMake(0.36, 18.44))
        rowPath.addLineToPoint(CGPointMake(2.58, 20.7))
        rowPath.addLineToPoint(CGPointMake(2.59, 20.69))
        rowPath.addLineToPoint(CGPointMake(18.1, 36.42))
        rowPath.addLineToPoint(CGPointMake(20.32, 34.17))
        rowPath.addLineToPoint(CGPointMake(4.81, 18.44))
        rowPath.addLineToPoint(CGPointMake(20.39, 2.65))
        rowPath.addLineToPoint(CGPointMake(18.16, 0.39))
        rowPath.addLineToPoint(CGPointMake(2.58, 16.19))
        rowPath.addLineToPoint(CGPointMake(2.57, 16.18))
        rowPath.addLineToPoint(CGPointMake(0.36, 18.43))
        rowPath.addLineToPoint(CGPointMake(0.36, 18.44))
        rowPath.closePath()
        rowPath.miterLimit = 4;

        rowPath.usesEvenOddFillRule = true;

        color2.setFill()
        rowPath.fill()
    }

    public class func drawCheck() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Shape Drawing
        var shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPointMake(10.37, 15.41))
        shapePath.addLineToPoint(CGPointMake(24.87, 0.94))
        shapePath.addLineToPoint(CGPointMake(27.87, 3.94))
        shapePath.addLineToPoint(CGPointMake(10.37, 21.41))
        shapePath.addLineToPoint(CGPointMake(1.87, 12.91))
        shapePath.addLineToPoint(CGPointMake(4.87, 9.91))
        shapePath.addLineToPoint(CGPointMake(10.37, 15.41))
        shapePath.addLineToPoint(CGPointMake(10.37, 15.41))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        color0.setFill()
        shapePath.fill()
    }

    public class func drawTabs() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Tabs Drawing
        var tabsPath = UIBezierPath()
        tabsPath.moveToPoint(CGPointMake(0.37, 11.41))
        tabsPath.addLineToPoint(CGPointMake(0.37, 49.41))
        tabsPath.addLineToPoint(CGPointMake(38.37, 49.41))
        tabsPath.addLineToPoint(CGPointMake(38.37, 11.41))
        tabsPath.addLineToPoint(CGPointMake(0.37, 11.41))
        tabsPath.addLineToPoint(CGPointMake(0.37, 11.41))
        tabsPath.closePath()
        tabsPath.moveToPoint(CGPointMake(36.37, 47.41))
        tabsPath.addLineToPoint(CGPointMake(2.37, 47.41))
        tabsPath.addLineToPoint(CGPointMake(2.37, 13.41))
        tabsPath.addLineToPoint(CGPointMake(36.37, 13.41))
        tabsPath.addLineToPoint(CGPointMake(36.37, 47.41))
        tabsPath.closePath()
        tabsPath.moveToPoint(CGPointMake(11.37, 9.41))
        tabsPath.addLineToPoint(CGPointMake(13.37, 9.41))
        tabsPath.addLineToPoint(CGPointMake(13.37, 2.41))
        tabsPath.addLineToPoint(CGPointMake(47.37, 2.41))
        tabsPath.addLineToPoint(CGPointMake(47.37, 36.41))
        tabsPath.addLineToPoint(CGPointMake(40.37, 36.41))
        tabsPath.addLineToPoint(CGPointMake(40.37, 38.41))
        tabsPath.addLineToPoint(CGPointMake(49.37, 38.41))
        tabsPath.addLineToPoint(CGPointMake(49.37, 0.41))
        tabsPath.addLineToPoint(CGPointMake(11.37, 0.41))
        tabsPath.addLineToPoint(CGPointMake(11.37, 9.41))
        tabsPath.closePath()
        tabsPath.miterLimit = 4;

        tabsPath.usesEvenOddFillRule = true;

        color0.setFill()
        tabsPath.fill()
    }

    public class func drawWrite() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Shape Drawing
        var shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPointMake(29.29, 10.4))
        shapePath.addLineToPoint(CGPointMake(2.4, 10.4))
        shapePath.addLineToPoint(CGPointMake(2.4, 44.4))
        shapePath.addLineToPoint(CGPointMake(36.4, 44.4))
        shapePath.addLineToPoint(CGPointMake(36.4, 17.61))
        shapePath.addLineToPoint(CGPointMake(38.4, 15.61))
        shapePath.addLineToPoint(CGPointMake(38.4, 46.4))
        shapePath.addLineToPoint(CGPointMake(0.4, 46.4))
        shapePath.addLineToPoint(CGPointMake(0.4, 8.4))
        shapePath.addLineToPoint(CGPointMake(31.29, 8.4))
        shapePath.addLineToPoint(CGPointMake(29.29, 10.4))
        shapePath.addLineToPoint(CGPointMake(29.29, 10.4))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        color0.setFill()
        shapePath.fill()


        //// Shape 2 Drawing
        var shape2Path = UIBezierPath()
        shape2Path.moveToPoint(CGPointMake(38.97, 3.52))
        shape2Path.addLineToPoint(CGPointMake(16.65, 25.9))
        shape2Path.addLineToPoint(CGPointMake(15.93, 30.87))
        shape2Path.addLineToPoint(CGPointMake(20.89, 30.14))
        shape2Path.addLineToPoint(CGPointMake(43.22, 7.76))
        shape2Path.addLineToPoint(CGPointMake(38.97, 3.52))
        shape2Path.addLineToPoint(CGPointMake(38.97, 3.52))
        shape2Path.closePath()
        shape2Path.moveToPoint(CGPointMake(20.2, 27.98))
        shape2Path.addLineToPoint(CGPointMake(18.79, 26.56))
        shape2Path.addLineToPoint(CGPointMake(40.39, 4.96))
        shape2Path.addLineToPoint(CGPointMake(41.81, 6.37))
        shape2Path.addLineToPoint(CGPointMake(20.2, 27.98))
        shape2Path.addLineToPoint(CGPointMake(20.2, 27.98))
        shape2Path.closePath()
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = true;

        color0.setFill()
        shape2Path.fill()


        //// Shape 3 Drawing
        var shape3Path = UIBezierPath()
        shape3Path.moveToPoint(CGPointMake(44.33, 6.71))
        shape3Path.addLineToPoint(CGPointMake(46.4, 4.57))
        shape3Path.addCurveToPoint(CGPointMake(45.07, 1.61), controlPoint1: CGPointMake(46.4, 4.57), controlPoint2: CGPointMake(46.14, 2.68))
        shape3Path.addCurveToPoint(CGPointMake(42.16, 0.33), controlPoint1: CGPointMake(44.02, 0.56), controlPoint2: CGPointMake(42.16, 0.33))
        shape3Path.addLineToPoint(CGPointMake(40.09, 2.46))
        shape3Path.addLineToPoint(CGPointMake(44.33, 6.71))
        shape3Path.addLineToPoint(CGPointMake(44.33, 6.71))
        shape3Path.closePath()
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = true;

        color0.setFill()
        shape3Path.fill()
    }

    public class func drawCamera() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// Shape Drawing
        var shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPointMake(25.87, 14.06))
        shapePath.addCurveToPoint(CGPointMake(34.73, 22.9), controlPoint1: CGPointMake(30.76, 14.06), controlPoint2: CGPointMake(34.73, 18.02))
        shapePath.addCurveToPoint(CGPointMake(25.87, 31.75), controlPoint1: CGPointMake(34.73, 27.79), controlPoint2: CGPointMake(30.76, 31.75))
        shapePath.addCurveToPoint(CGPointMake(17.01, 22.9), controlPoint1: CGPointMake(20.98, 31.75), controlPoint2: CGPointMake(17.01, 27.79))
        shapePath.addCurveToPoint(CGPointMake(25.87, 14.06), controlPoint1: CGPointMake(17.01, 18.02), controlPoint2: CGPointMake(20.98, 14.06))
        shapePath.addLineToPoint(CGPointMake(25.87, 14.06))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        color0.setFill()
        shapePath.fill()
        color0.setStroke()
        shapePath.lineWidth = 1
        shapePath.stroke()


        //// Shape 2 Drawing
        var shape2Path = UIBezierPath()
        shape2Path.moveToPoint(CGPointMake(48.65, 7.43))
        shape2Path.addLineToPoint(CGPointMake(38.47, 7.43))
        shape2Path.addCurveToPoint(CGPointMake(35.61, 3.52), controlPoint1: CGPointMake(37.61, 6.65), controlPoint2: CGPointMake(36.56, 5.42))
        shape2Path.addCurveToPoint(CGPointMake(31.31, 1.48), controlPoint1: CGPointMake(34.48, 1.27), controlPoint2: CGPointMake(31.31, 1.48))
        shape2Path.addLineToPoint(CGPointMake(21.33, 1.48))
        shape2Path.addCurveToPoint(CGPointMake(17.14, 3.49), controlPoint1: CGPointMake(21.33, 1.48), controlPoint2: CGPointMake(18.72, 0.88))
        shape2Path.addCurveToPoint(CGPointMake(14.33, 7.43), controlPoint1: CGPointMake(16.12, 5.18), controlPoint2: CGPointMake(15.2, 6.53))
        shape2Path.addLineToPoint(CGPointMake(4.09, 7.43))
        shape2Path.addCurveToPoint(CGPointMake(1.37, 10.13), controlPoint1: CGPointMake(2.59, 7.43), controlPoint2: CGPointMake(1.37, 8.64))
        shape2Path.addLineToPoint(CGPointMake(1.37, 35.71))
        shape2Path.addCurveToPoint(CGPointMake(4.09, 38.41), controlPoint1: CGPointMake(1.37, 37.2), controlPoint2: CGPointMake(2.59, 38.41))
        shape2Path.addLineToPoint(CGPointMake(48.65, 38.41))
        shape2Path.addCurveToPoint(CGPointMake(51.37, 35.71), controlPoint1: CGPointMake(50.15, 38.41), controlPoint2: CGPointMake(51.37, 37.2))
        shape2Path.addLineToPoint(CGPointMake(51.37, 10.13))
        shape2Path.addCurveToPoint(CGPointMake(48.65, 7.43), controlPoint1: CGPointMake(51.37, 8.64), controlPoint2: CGPointMake(50.15, 7.43))
        shape2Path.addLineToPoint(CGPointMake(48.65, 7.43))
        shape2Path.closePath()
        shape2Path.moveToPoint(CGPointMake(25.43, 34.4))
        shape2Path.addCurveToPoint(CGPointMake(14.36, 22.9), controlPoint1: CGPointMake(19.31, 34.4), controlPoint2: CGPointMake(14.36, 29.25))
        shape2Path.addCurveToPoint(CGPointMake(25.43, 11.41), controlPoint1: CGPointMake(14.36, 16.55), controlPoint2: CGPointMake(19.31, 11.41))
        shape2Path.addCurveToPoint(CGPointMake(37.39, 22.9), controlPoint1: CGPointMake(31.54, 11.41), controlPoint2: CGPointMake(37.39, 16.55))
        shape2Path.addCurveToPoint(CGPointMake(25.43, 34.4), controlPoint1: CGPointMake(37.39, 29.25), controlPoint2: CGPointMake(31.54, 34.4))
        shape2Path.addLineToPoint(CGPointMake(25.43, 34.4))
        shape2Path.closePath()
        shape2Path.moveToPoint(CGPointMake(40.39, 13.9))
        shape2Path.addCurveToPoint(CGPointMake(38.78, 12.31), controlPoint1: CGPointMake(39.5, 13.9), controlPoint2: CGPointMake(38.78, 13.19))
        shape2Path.addCurveToPoint(CGPointMake(40.39, 10.71), controlPoint1: CGPointMake(38.78, 11.42), controlPoint2: CGPointMake(39.5, 10.71))
        shape2Path.addCurveToPoint(CGPointMake(42, 12.31), controlPoint1: CGPointMake(41.28, 10.71), controlPoint2: CGPointMake(42, 11.42))
        shape2Path.addCurveToPoint(CGPointMake(40.39, 13.9), controlPoint1: CGPointMake(42, 13.19), controlPoint2: CGPointMake(41.28, 13.9))
        shape2Path.addLineToPoint(CGPointMake(40.39, 13.9))
        shape2Path.closePath()
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = true;

        color0.setFill()
        shape2Path.fill()


        //// Shape 3 Drawing
        var shape3Path = UIBezierPath()
        shape3Path.moveToPoint(CGPointMake(7.12, 5.43))
        shape3Path.addLineToPoint(CGPointMake(7.12, 4.08))
        shape3Path.addCurveToPoint(CGPointMake(7.8, 3.41), controlPoint1: CGPointMake(7.12, 3.71), controlPoint2: CGPointMake(7.43, 3.41))
        shape3Path.addLineToPoint(CGPointMake(10.88, 3.41))
        shape3Path.addCurveToPoint(CGPointMake(11.56, 4.08), controlPoint1: CGPointMake(11.25, 3.41), controlPoint2: CGPointMake(11.56, 3.71))
        shape3Path.addLineToPoint(CGPointMake(11.56, 5.43))
        shape3Path.addLineToPoint(CGPointMake(7.12, 5.43))
        shape3Path.addLineToPoint(CGPointMake(7.12, 5.43))
        shape3Path.closePath()
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = true;

        color0.setFill()
        shape3Path.fill()
        color0.setStroke()
        shape3Path.lineWidth = 1
        shape3Path.stroke()
    }

    public class func drawThreeSegmentedCircle2px() {
        //// Color Declarations
        let color0 = UIColor(red: 0.041, green: 0.375, blue: 0.998, alpha: 1.000)

        //// oval-befor-the-scissors-2 Drawing
        var ovalbeforthescissors2Path = UIBezierPath()
        ovalbeforthescissors2Path.moveToPoint(CGPointMake(6.2, 41.27))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(7.06, 42.51), controlPoint1: CGPointMake(6.47, 41.69), controlPoint2: CGPointMake(6.76, 42.11))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(28, 53), controlPoint1: CGPointMake(11.8, 48.87), controlPoint2: CGPointMake(19.41, 53))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(48.93, 42.53), controlPoint1: CGPointMake(36.58, 53), controlPoint2: CGPointMake(44.19, 48.88))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(49.82, 41.26), controlPoint1: CGPointMake(49.23, 42.11), controlPoint2: CGPointMake(49.53, 41.69))
        ovalbeforthescissors2Path.moveToPoint(CGPointMake(51.22, 38.85))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(51.85, 37.52), controlPoint1: CGPointMake(51.44, 38.41), controlPoint2: CGPointMake(51.65, 37.97))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(54, 27.23), controlPoint1: CGPointMake(53.23, 34.36), controlPoint2: CGPointMake(54, 30.89))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(30.93, 1.62), controlPoint1: CGPointMake(54, 13.98), controlPoint2: CGPointMake(43.91, 3.06))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(29.39, 1.49), controlPoint1: CGPointMake(30.42, 1.56), controlPoint2: CGPointMake(29.91, 1.52))
        ovalbeforthescissors2Path.moveToPoint(CGPointMake(26.59, 1.5))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(25.09, 1.62), controlPoint1: CGPointMake(26.09, 1.52), controlPoint2: CGPointMake(25.59, 1.56))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(2, 27.23), controlPoint1: CGPointMake(12.1, 3.05), controlPoint2: CGPointMake(2, 13.97))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(4.15, 37.5), controlPoint1: CGPointMake(2, 30.88), controlPoint2: CGPointMake(2.77, 34.35))
        ovalbeforthescissors2Path.addCurveToPoint(CGPointMake(4.78, 38.85), controlPoint1: CGPointMake(4.35, 37.95), controlPoint2: CGPointMake(4.56, 38.4))
        ovalbeforthescissors2Path.miterLimit = 4;

        ovalbeforthescissors2Path.usesEvenOddFillRule = true;

        color0.setStroke()
        ovalbeforthescissors2Path.lineWidth = 2
        ovalbeforthescissors2Path.stroke()
    }

    //// Generated Images

    public class var imageOfAddInCircle: UIImage {
        if Cache.imageOfAddInCircle != nil {
            return Cache.imageOfAddInCircle!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(57, 57), false, 0)
            IOSIcons.drawAddInCircle()

        Cache.imageOfAddInCircle = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAddInCircle!
    }

    public class var imageOfAdd: UIImage {
        if Cache.imageOfAdd != nil {
            return Cache.imageOfAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(33, 33), false, 0)
            IOSIcons.drawAdd()

        Cache.imageOfAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAdd!
    }

    public class var imageOfAlbum: UIImage {
        if Cache.imageOfAlbum != nil {
            return Cache.imageOfAlbum!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 54), false, 0)
            IOSIcons.drawAlbum()

        Cache.imageOfAlbum = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAlbum!
    }

    public class var imageOfClock: UIImage {
        if Cache.imageOfClock != nil {
            return Cache.imageOfClock!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(57, 57), false, 0)
            IOSIcons.drawClock()

        Cache.imageOfClock = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClock!
    }

    public class var imageOfDownloadICloud: UIImage {
        if Cache.imageOfDownloadICloud != nil {
            return Cache.imageOfDownloadICloud!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(58, 52), false, 0)
            IOSIcons.drawDownloadICloud()

        Cache.imageOfDownloadICloud = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDownloadICloud!
    }

    public class var imageOfInfo: UIImage {
        if Cache.imageOfInfo != nil {
            return Cache.imageOfInfo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(57, 57), false, 0)
            IOSIcons.drawInfo()

        Cache.imageOfInfo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfInfo!
    }

    public class var imageOfMore: UIImage {
        if Cache.imageOfMore != nil {
            return Cache.imageOfMore!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(51, 13), false, 0)
            IOSIcons.drawMore()

        Cache.imageOfMore = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMore!
    }

    public class var imageOfPhotos: UIImage {
        if Cache.imageOfPhotos != nil {
            return Cache.imageOfPhotos!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 50), false, 0)
            IOSIcons.drawPhotos()

        Cache.imageOfPhotos = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPhotos!
    }

    public class var imageOfRemove: UIImage {
        if Cache.imageOfRemove != nil {
            return Cache.imageOfRemove!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(57, 57), false, 0)
            IOSIcons.drawRemove()

        Cache.imageOfRemove = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRemove!
    }

    public class var imageOfSent: UIImage {
        if Cache.imageOfSent != nil {
            return Cache.imageOfSent!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(55, 56), false, 0)
            IOSIcons.drawSent()

        Cache.imageOfSent = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSent!
    }

    public class var imageOfShare: UIImage {
        if Cache.imageOfShare != nil {
            return Cache.imageOfShare!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(45, 59), false, 0)
            IOSIcons.drawShare()

        Cache.imageOfShare = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShare!
    }

    public class var imageOfSoundOff: UIImage {
        if Cache.imageOfSoundOff != nil {
            return Cache.imageOfSoundOff!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(52, 37), false, 0)
            IOSIcons.drawSoundOff()

        Cache.imageOfSoundOff = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSoundOff!
    }

    public class var imageOfSoundOn: UIImage {
        if Cache.imageOfSoundOn != nil {
            return Cache.imageOfSoundOn!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(54, 46), false, 0)
            IOSIcons.drawSoundOn()

        Cache.imageOfSoundOn = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSoundOn!
    }

    public class var imageOfSound: UIImage {
        if Cache.imageOfSound != nil {
            return Cache.imageOfSound!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 37), false, 0)
            IOSIcons.drawSound()

        Cache.imageOfSound = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSound!
    }

    public class var imageOfUpload: UIImage {
        if Cache.imageOfUpload != nil {
            return Cache.imageOfUpload!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(58, 53), false, 0)
            IOSIcons.drawUpload()

        Cache.imageOfUpload = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUpload!
    }

    public class var imageOfFolder: UIImage {
        if Cache.imageOfFolder != nil {
            return Cache.imageOfFolder!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(58, 50), false, 0)
            IOSIcons.drawFolder()

        Cache.imageOfFolder = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFolder!
    }

    public class var imageOfFolderAdd: UIImage {
        if Cache.imageOfFolderAdd != nil {
            return Cache.imageOfFolderAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(58, 50), false, 0)
            IOSIcons.drawFolderAdd()

        Cache.imageOfFolderAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFolderAdd!
    }

    public class var imageOfFolderRemove: UIImage {
        if Cache.imageOfFolderRemove != nil {
            return Cache.imageOfFolderRemove!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(58, 50), false, 0)
            IOSIcons.drawFolderRemove()

        Cache.imageOfFolderRemove = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFolderRemove!
    }

    public class var imageOfRow: UIImage {
        if Cache.imageOfRow != nil {
            return Cache.imageOfRow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(21, 37), false, 0)
            IOSIcons.drawRow()

        Cache.imageOfRow = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRow!
    }

    public class var imageOfCheck: UIImage {
        if Cache.imageOfCheck != nil {
            return Cache.imageOfCheck!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(29, 23), false, 0)
            IOSIcons.drawCheck()

        Cache.imageOfCheck = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCheck!
    }

    public class var imageOfTabs: UIImage {
        if Cache.imageOfTabs != nil {
            return Cache.imageOfTabs!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            IOSIcons.drawTabs()

        Cache.imageOfTabs = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTabs!
    }

    public class var imageOfWrite: UIImage {
        if Cache.imageOfWrite != nil {
            return Cache.imageOfWrite!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(47, 47), false, 0)
            IOSIcons.drawWrite()

        Cache.imageOfWrite = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfWrite!
    }

    public class var imageOfCamera: UIImage {
        if Cache.imageOfCamera != nil {
            return Cache.imageOfCamera!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(52, 40), false, 0)
            IOSIcons.drawCamera()

        Cache.imageOfCamera = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCamera!
    }

    public class var imageOfThreeSegmentedCircle2px: UIImage {
        if Cache.imageOfThreeSegmentedCircle2px != nil {
            return Cache.imageOfThreeSegmentedCircle2px!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(56, 55), false, 0)
            IOSIcons.drawThreeSegmentedCircle2px()

        Cache.imageOfThreeSegmentedCircle2px = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfThreeSegmentedCircle2px!
    }

//    //// Customization Infrastructure
//
//    @IBOutlet var addInCircleTargets: [AnyObject]! {
//        get { return Cache.addInCircleTargets }
//        set {
//            Cache.addInCircleTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfAddInCircle)
//            }
//        }
//    }
//
//    @IBOutlet var addTargets: [AnyObject]! {
//        get { return Cache.addTargets }
//        set {
//            Cache.addTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfAdd)
//            }
//        }
//    }
//
//    @IBOutlet var albumTargets: [AnyObject]! {
//        get { return Cache.albumTargets }
//        set {
//            Cache.albumTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfAlbum)
//            }
//        }
//    }
//
//    @IBOutlet var clockTargets: [AnyObject]! {
//        get { return Cache.clockTargets }
//        set {
//            Cache.clockTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfClock)
//            }
//        }
//    }
//
//    @IBOutlet var downloadICloudTargets: [AnyObject]! {
//        get { return Cache.downloadICloudTargets }
//        set {
//            Cache.downloadICloudTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfDownloadICloud)
//            }
//        }
//    }
//
//    @IBOutlet var infoTargets: [AnyObject]! {
//        get { return Cache.infoTargets }
//        set {
//            Cache.infoTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfInfo)
//            }
//        }
//    }
//
//    @IBOutlet var moreTargets: [AnyObject]! {
//        get { return Cache.moreTargets }
//        set {
//            Cache.moreTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfMore)
//            }
//        }
//    }
//
//    @IBOutlet var photosTargets: [AnyObject]! {
//        get { return Cache.photosTargets }
//        set {
//            Cache.photosTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfPhotos)
//            }
//        }
//    }
//
//    @IBOutlet var removeTargets: [AnyObject]! {
//        get { return Cache.removeTargets }
//        set {
//            Cache.removeTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfRemove)
//            }
//        }
//    }
//
//    @IBOutlet var sentTargets: [AnyObject]! {
//        get { return Cache.sentTargets }
//        set {
//            Cache.sentTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfSent)
//            }
//        }
//    }
//
//    @IBOutlet var shareTargets: [AnyObject]! {
//        get { return Cache.shareTargets }
//        set {
//            Cache.shareTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfShare)
//            }
//        }
//    }
//
//    @IBOutlet var soundOffTargets: [AnyObject]! {
//        get { return Cache.soundOffTargets }
//        set {
//            Cache.soundOffTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfSoundOff)
//            }
//        }
//    }
//
//    @IBOutlet var soundOnTargets: [AnyObject]! {
//        get { return Cache.soundOnTargets }
//        set {
//            Cache.soundOnTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfSoundOn)
//            }
//        }
//    }
//
//    @IBOutlet var soundTargets: [AnyObject]! {
//        get { return Cache.soundTargets }
//        set {
//            Cache.soundTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfSound)
//            }
//        }
//    }
//
//    @IBOutlet var uploadTargets: [AnyObject]! {
//        get { return Cache.uploadTargets }
//        set {
//            Cache.uploadTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfUpload)
//            }
//        }
//    }
//
//    @IBOutlet var folderTargets: [AnyObject]! {
//        get { return Cache.folderTargets }
//        set {
//            Cache.folderTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfFolder)
//            }
//        }
//    }
//
//    @IBOutlet var folderAddTargets: [AnyObject]! {
//        get { return Cache.folderAddTargets }
//        set {
//            Cache.folderAddTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfFolderAdd)
//            }
//        }
//    }
//
//    @IBOutlet var folderRemoveTargets: [AnyObject]! {
//        get { return Cache.folderRemoveTargets }
//        set {
//            Cache.folderRemoveTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfFolderRemove)
//            }
//        }
//    }
//
//    @IBOutlet var rowTargets: [AnyObject]! {
//        get { return Cache.rowTargets }
//        set {
//            Cache.rowTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfRow)
//            }
//        }
//    }
//
//    @IBOutlet var checkTargets: [AnyObject]! {
//        get { return Cache.checkTargets }
//        set {
//            Cache.checkTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfCheck)
//            }
//        }
//    }
//
//    @IBOutlet var tabsTargets: [AnyObject]! {
//        get { return Cache.tabsTargets }
//        set {
//            Cache.tabsTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfTabs)
//            }
//        }
//    }
//
//    @IBOutlet var writeTargets: [AnyObject]! {
//        get { return Cache.writeTargets }
//        set {
//            Cache.writeTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfWrite)
//            }
//        }
//    }
//
//    @IBOutlet var cameraTargets: [AnyObject]! {
//        get { return Cache.cameraTargets }
//        set {
//            Cache.cameraTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfCamera)
//            }
//        }
//    }
//
//    @IBOutlet var threeSegmentedCircle2pxTargets: [AnyObject]! {
//        get { return Cache.threeSegmentedCircle2pxTargets }
//        set {
//            Cache.threeSegmentedCircle2pxTargets = newValue
//            for target: AnyObject in newValue {
//                target.setImage(IOSIcons.imageOfThreeSegmentedCircle2px)
//            }
//        }
//    }

}

//@objc protocol StyleKitSettableImage {
//    func setImage(image: UIImage!)
//}
//
//@objc protocol StyleKitSettableSelectedImage {
//    func setSelectedImage(image: UIImage!)
//}
